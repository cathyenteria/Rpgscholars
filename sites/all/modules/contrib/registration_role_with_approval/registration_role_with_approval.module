<?php

/**
 * @file
 *  This module lets an administrator select roles that will be available for selection on registration form.
 *  It also allows to select which roles needs admin approval. If user selects such a role during registration his account will be blocked
 *  until approved by admin.
 *
 * @author Tamer Al Zoubi [tamerzg@gmail.com]
 */


/**
 *Implementation of hook_menu()
 */
function registration_role_with_approval_menu() {


  $items['admin/config/people/registration_role_with_approval'] = array(
    'title' => 'Registration Role With Approval',
    'description' => 'Configure Registration Role With Approval.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_registration_role_with_approval_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function registration_role_with_approval_form_alter(&$form, $form_state, $form_id) {
  $roles = array();
  if ($form_id == 'user_register_form') {

    $available_roles = variable_get(
      'registration_role_with_approval_profile_roles',
      $roles
    );

    if (!empty($available_roles)) {
      foreach ($available_roles as $role) {
        if ($role['needs_approval']) {
          $name = $role['label'] . " (*needs admin approval)";
        }
        else {
          $name = $role['label'];
        }
        $form[$role['id']] = array(
          '#type' => 'checkbox',
          '#title' => $name,
        );
      }
    }
    $form['#submit'][] = 'registration_role_with_approval_register_add_role';
  }

}

function registration_role_with_approval_register_add_role($form, &$form_state) {
  $roles = array();
  $uid = $form_state['user']->uid;
  $username = $form_state['user']->name;
  $user = user_load($uid);
  $params['user'] = $user;
  $profile_roles = variable_get(
    'registration_role_with_approval_profile_roles',
    $roles
  );

  foreach ($profile_roles as $profile_role) {
    if ($form_state['values'][$profile_role['id']]) {
      //db_query('INSERT INTO {users_roles} VALUES (%uid, %rid)', array('uid' => $uid, 'rid' => $approval_role['id']));
      db_insert('users_roles')->fields(
        array('uid' => $uid, 'rid' => $profile_role['id'])
      )->execute();
      if ($profile_role['needs_approval']) {
        //Block account until approved by administrator
        //db_query("UPDATE {users} SET status=0 WHERE uid = %d", $uid);
        db_update('users')->fields(array('status' => 0))->condition(
          'uid',
          $uid,
          '='
        )->execute();
        $user_approval[] = $profile_role['id'];
      }
    }
  }

  // Send email notification to administrator
  if (!empty($user_approval)) {
    if (variable_get('user_mail_register_no_approval_required_notify') == 1) {
      variable_set('user_mail_register_no_approval_required_notify', 0);
    }
    $params = array(
      'username' => $username,
      'user_approval' => $user_approval,
      'user' => $user,
    );

    $admin = user_load(1);
    $mailing_list = variable_get(
      'registration_role_with_approval_mailing_list',
      $admin->mail
    );

    $mailing_list_array = explode(" ", $mailing_list);

    foreach ($mailing_list_array as $email) {
      drupal_mail(
        'registration_role_with_approval',
        'registration',
        $email,
        language_default(),
        $params
      );
    }

    _user_mail_notify(
      'register_pending_approval',
      $user,
      language_default()
    );
  }
  else {
    if (variable_get('user_mail_register_no_approval_required_notify') == 0) {
      variable_set('user_mail_register_no_approval_required_notify', 1);
    }
    _user_mail_notify(
      'register_no_approval_required',
      $user,
      language_default()
    );
  }
}


function registration_role_with_approval_mail($key, &$message, $params) {
  switch ($key) {
    case 'registration':
      $roles = "";
      foreach ($params['user_approval'] as $user_approval) {
        /*        $role_name = db_result(
                  db_query("SELECT  name FROM {role} WHERE rid=%d", $user_approval)
                );*/
        $role_name = db_select('role', 'r')
          ->fields('r', array('name'))
          ->condition('rid', $user_approval, '=')
          ->execute()
          ->fetchAssoc();
        $roles .= $role_name['name'] . " ";
      }
      $mail_subject = variable_get(
        'registration_role_with_approval_mail_subject',
        ""
      );
      $mail_body = variable_get(
        'registration_role_with_approval_profile_mail_body',
        ""
      );
      $mail_body = str_replace('!username', $params['user']->name, $mail_body);
      $mail_body = str_replace('!roles', $roles, $mail_body, $mail_body);
      $message['subject'] = $mail_subject;
      $message['body'][] = $mail_body;
      break;


  }
}

/**
 * Registration Role With Approval admin settings form.
 *
 * @return
 * The settings form used by Registration Role With Approval.
 */
function _registration_role_with_approval_admin_settings_form() {

  $check = db_query('SELECT COUNT(rid) FROM {role} WHERE rid>2')->fetchField();
  $admin = user_load(1);
  $profile_roles = variable_get(
    'registration_role_with_approval_profile_roles',
    array()
  );

  if ($check > 0) {
    $system_roles = db_query("SELECT * FROM {role} WHERE rid>2");
    $form['roles'] = array(
      '#type' => 'fieldset',
      '#title' => t('Available Roles on registration form'),
      '#collapsible' => TRUE,
    );

    foreach ($system_roles as $system_role) {
      $system_role_id = $system_role->rid;
      if ($profile_roles != NULL) {
        if (array_key_exists($system_role_id, $profile_roles)) {
          if(array_key_exists('default', $profile_roles[$system_role_id])){
            $default_value = $profile_roles[$system_role_id]['default'];
          }
          else {
            $default_value = 0;
          }
          if(array_key_exists('needs_approval', $profile_roles[$system_role_id])){
            $approval_default_value = $profile_roles[$system_role_id]['needs_approval'];
          }
          else{
            $approval_default_value = 0;
          }

        }
        else {
          $default_value = 0;
          $approval_default_value = 0;
        }

      }
      else {
        $default_value = 0;
        $approval_default_value = 0;
      }
      if ($system_role_id != '0') {
        $form['roles'][$system_role_id] = array(
          '#type' => 'checkbox',
          '#title' => t($system_role->name),
          '#default_value' => $default_value,
        );
        $form['roles'][$system_role_id . "needs_approval"] = array(
          '#type' => 'checkbox',
          '#title' => t('needs approval'),
          '#states' => array(
            'invisible' => array(
              ":input[name='$system_role_id']" => array('checked' => FALSE),
            ),
          ),
          '#attributes' => array(
            'style' => 'margin-left: 2em',
          ),
          '#default_value' => $approval_default_value,
        );
      }
    }

    $form['registration_role_with_approval_mailing_list'] = array(
      '#type' => 'textarea',
      '#title' => 'Mailing list',
      '#description' => 'Enter email address (if multiple addresses separate with space) to whom email is sent when user approval is needed!',
      '#default_value' => variable_get(
        'registration_role_with_approval_mailing_list',
        $admin->mail
      ),
    );
    $mail_subject = variable_get(
      'registration_role_with_approval_profile_mail_subject',
      'New Roles Request'
    );
    $form['registration_role_with_approval_mail_subject'] = array(
      '#type' => 'textfield',
      '#title' => 'Mail subject',
      '#default_value' => $mail_subject,
    );

    $default_mail_body = "Name: !username had request a role that need your confirmation.\nRole(s) that need your approvals:\n!roles ";
    $mail_body = variable_get(
      'registration_role_with_approval_mail_body',
      $default_mail_body
    );
    $form['registration_role_with_approval_mail_body'] = array(
      '#type' => 'textarea',
      '#title' => 'Mail body',
      '#description' => 'Enter custom registration mail body!',
      '#default_value' => $mail_body,
    );

    $form['#submit'][] = 'registration_role_with_approval_admin_form_submit';
    return system_settings_form($form);
  }
  else {
    $form['registration_role_with_approval_label'] = array(
      '#value' => t('To use configuration of this module you have to ') . l(
          t('create at least one role'),
          'admin/people/permissions/roles'
        ),
    );
    return $form;
  }
}


function registration_role_with_approval_admin_form_submit($form, &$form_state) {
  $system_roles = db_query("SELECT * FROM {role} WHERE rid>2");
  $config_list = array();
  foreach ($system_roles as $system_role) {
    if ($form_state['values'][$system_role->rid]) {
      $config_list[$system_role->rid]['id'] = $system_role->rid;
      $config_list[$system_role->rid]['default'] = 1;
      $config_list[$system_role->rid]['label'] = $system_role->name;
      $config_list[$system_role->rid]
      ['needs_approval'] = $form_state['values'][$system_role->rid . "needs_approval"];
    }
  };

  variable_set(
    'registration_role_with_approval_profile_roles',
    $config_list
  );
  variable_set(
    'registration_role_with_approval_mailing_list',
    $form_state['values']['registration_role_with_approval_mailing_list']
  );
  variable_set(
    'registration_role_with_approval_mail_subject',
    $form_state['values']['registration_role_with_approval_mail_subject']
  );
  variable_set(
    'registration_role_with_approval_mail_body',
    $form_state['values']['registration_role_with_approval_mail_body']
  );
}
